class Cat:
    species = 'Кошка простая' #Вид

    def __init__(self, color, age):
        self.species = "Кошка простая"
        self.color = color  
        self._age = age 

    def make_sound(self):  
        return "Meow"
    
    def get_info(self):
        return f"Эта кошка цвета {self.color} и ей {self._age} лет"
    
    def _secret_life(self):  
        return "Я люблю спать каждый день"
    
    @classmethod
    def get_species(cls):
        return cls.species 
    
    @staticmethod
    def is_homelike():
        return True
    
    def __str__(self):
        return f"Кошка {self.color} цвета, возраст: {self._age}, вид {self.species}"
    

class Lion(Cat):
    # species = 'Кошка сложная' #Вид

    def make_sound(self):  
        return "Roar"
    
    def get_info(self):
        return f"Это лев и он {self.color} цвета и ему {self._age} лет"
    
    def _secret_life(self):  
        return "Я король джунглей!!!!!"

    

my_cat = Cat("black", 4)
print(my_cat)
print(Cat.is_homelike())
# print(my_cat.make_sound())
# print(my_cat.get_info())
# print(my_cat._secret_life())

#_______________________________________________________

my_lion = Lion('golden', 5)
print(my_lion)
# print(my_lion.get_info())
# print(my_lion.make_sound())
# print(my_lion._secret_life())



'''
Про три кита ООП простыми словами на примерах 

- Инкапсуляция — это как когда ты хранишь свои игрушки в ящике и не даешь всем посмотреть, 
что там внутри, но легко можешь достать любую игрушку по своему желанию.

- Наследование — это когда младший брат или сестра учится делать что-то у старшего, 
но добавляет что-то свое, например, ты умеешь кататься на велосипеде, а твой брат 
или сестра тоже учится, но на трехколесном.

- Полиморфизм — это как играть в одну и ту же игру с разными правилами в зависимости от того, 
с кем ты играешь. Например, мячик можно катать по полу, а можно использовать в 
игре в баскетбол, чтобы кидать в корзину.
(Принцип, позволяющий использовать один и тот же метод с разными 
объектами. В классе Lion мы переопределили метод make_sound, чтобы он выдавал 
звук, свойственный льву, а не кошке. )

Еще раз максимально советую посмотреть на этот сайт и уделить ему времени:
https://proproprogs.ru/python


- classmethod:
Часто используется для работы с атрибутами класса или для других операций, 
которые связаны с классом, но не с конкретным его экземпляром.

- staticmethod:
    - Используется, когда метод не зависит от экземпляра или класса и 
    не нуждается в доступе ни к каким атрибутам класса или экземпляра

    - Метод не принимает ни self, ни cls в качестве первого параметра

    - Часто используется для вспомогательных функций, которые логически 
        связаны с классом, но не требуют доступа к его внутренним данным


        
Класс — это своего рода "шаблон" или "чертеж", который 
определяет структуру и поведение объектов. Класс содержит методы (функции) и атрибуты (данные), 
которые будут свойственны всем его экземплярам.

Экземпляр класса 
Экземпляр класса, или объект, — это конкретная реализация класса. 
Когда мы создаем новый объект, мы создаем новый экземпляр 
класса с конкретными значениями атрибутов.

На практике, термины "экземпляр класса" и "объект" часто используются взаимозаменяемо, 
так как объект всегда является экземпляром конкретного класса.
'''